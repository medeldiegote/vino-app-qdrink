import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
var BarcodeScanner = /** @class */ (function (_super) {
    __extends(BarcodeScanner, _super);
    function BarcodeScanner() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.Encode = {
            TEXT_TYPE: 'TEXT_TYPE',
            EMAIL_TYPE: 'EMAIL_TYPE',
            PHONE_TYPE: 'PHONE_TYPE',
            SMS_TYPE: 'SMS_TYPE',
        };
        return _this;
    }
    BarcodeScanner.prototype.scan = function (options) { return cordova(this, "scan", { "callbackOrder": "reverse" }, arguments); };
    BarcodeScanner.prototype.encode = function (type, data) { return cordova(this, "encode", {}, arguments); };
    BarcodeScanner.pluginName = "BarcodeScanner";
    BarcodeScanner.plugin = "phonegap-plugin-barcodescanner";
    BarcodeScanner.pluginRef = "cordova.plugins.barcodeScanner";
    BarcodeScanner.repo = "https://github.com/phonegap/phonegap-plugin-barcodescanner";
    BarcodeScanner.platforms = ["Android", "BlackBerry 10", "Browser", "iOS", "Windows"];
BarcodeScanner.ɵfac = function BarcodeScanner_Factory(t) { return ɵBarcodeScanner_BaseFactory(t || BarcodeScanner); };
BarcodeScanner.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BarcodeScanner, factory: function (t) { return BarcodeScanner.ɵfac(t); } });
var ɵBarcodeScanner_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(BarcodeScanner);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BarcodeScanner, [{
        type: Injectable
    }], null, null); })();
    return BarcodeScanner;
}(IonicNativePlugin));
export { BarcodeScanner };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvYmFyY29kZS1zY2FubmVyL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztBQUN4RTtBQUdRLElBMEc0QixrQ0FBaUI7QUFBQztBQUVwQztBQUlmLFFBTEQsWUFBTSxHQUtGO0FBQ04sWUFBSSxTQUFTLEVBQUUsV0FBVztBQUMxQixZQUFJLFVBQVUsRUFBRSxZQUFZO0FBQzVCLFlBQUksVUFBVSxFQUFFLFlBQVk7QUFDNUIsWUFBSSxRQUFRLEVBQUUsVUFBVTtBQUN4QixTQUFHLENBQUM7QUFDSjtBQUVlO0FBQU0sSUFPbkIsNkJBQUksYUFBQyxPQUErQjtBQUtiLElBT3ZCLCtCQUFNLGFBQUMsSUFBWSxFQUFFLElBQVM7QUFJZDtBQUFrRDtBQUE4RDtBQUFpRTtBQUF3RjtJQXJDOVEsY0FBYyx3QkFEMUIsVUFBVSxFQUFFLFFBQ0EsY0FBYzs7Ozs7MEJBQUU7QUFBQyx5QkEvRzlCO0FBQUUsRUErR2tDLGlCQUFpQjtBQUNwRCxTQURZLGNBQWM7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJhcmNvZGVTY2FubmVyT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBQcmVmZXIgZnJvbnQgY2FtZXJhLiBTdXBwb3J0ZWQgb24gaU9TIGFuZCBBbmRyb2lkLlxuICAgKi9cbiAgcHJlZmVyRnJvbnRDYW1lcmE/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBTaG93IGZsaXAgY2FtZXJhIGJ1dHRvbi4gU3VwcG9ydGVkIG9uIGlPUyBhbmQgQW5kcm9pZC5cbiAgICovXG4gIHNob3dGbGlwQ2FtZXJhQnV0dG9uPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogU2hvdyB0b3JjaCBidXR0b24uIFN1cHBvcnRlZCBvbiBpT1MgYW5kIEFuZHJvaWQuXG4gICAqL1xuICBzaG93VG9yY2hCdXR0b24/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBEaXNhYmxlIGFuaW1hdGlvbnMuIFN1cHBvcnRlZCBvbiBpT1Mgb25seS5cbiAgICovXG4gIGRpc2FibGVBbmltYXRpb25zPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogRGlzYWJsZSBzdWNjZXNzIGJlZXAuIFN1cHBvcnRlZCBvbiBpT1Mgb25seS5cbiAgICovXG4gIGRpc2FibGVTdWNjZXNzQmVlcD86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFByb21wdCB0ZXh0LiBTdXBwb3J0ZWQgb24gQW5kcm9pZCBvbmx5LlxuICAgKi9cbiAgcHJvbXB0Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBGb3JtYXRzIHNlcGFyYXRlZCBieSBjb21tYXMuIERlZmF1bHRzIHRvIGFsbCBmb3JtYXRzIGV4Y2VwdCBgUERGXzQxN2AgYW5kIGBSU1NfRVhQQU5ERURgLlxuICAgKi9cbiAgZm9ybWF0cz86IHN0cmluZztcblxuICAvKipcbiAgICogT3JpZW50YXRpb24uIFN1cHBvcnRlZCBvbiBBbmRyb2lkIG9ubHkuIENhbiBiZSBzZXQgdG8gYHBvcnRyYWl0YCBvciBgbGFuZHNjYXBlYC4gRGVmYXVsdHMgdG8gbm9uZSBzbyB0aGUgdXNlciBjYW4gcm90YXRlIHRoZSBwaG9uZSBhbmQgcGljayBhbiBvcmllbnRhdGlvbi5cbiAgICovXG4gIG9yaWVudGF0aW9uPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBMYXVuY2ggd2l0aCB0aGUgdG9yY2ggc3dpdGNoZWQgb24gKGlmIGF2YWlsYWJsZSkuIFN1cHBvcnRlZCBvbiBBbmRyb2lkIG9ubHkuXG4gICAqL1xuICB0b3JjaE9uPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogRGlzcGxheSBzY2FubmVkIHRleHQgZm9yIFggbXMuIDAgc3VwcHJlc3NlcyBpdCBlbnRpcmVseSwgZGVmYXVsdCAxNTAwLiBTdXBwb3J0ZWQgb24gQW5kcm9pZCBvbmx5LlxuICAgKi9cbiAgcmVzdWx0RGlzcGxheUR1cmF0aW9uPzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJhcmNvZGVTY2FuUmVzdWx0IHtcbiAgZm9ybWF0OlxuICAgIHwgJ1FSX0NPREUnXG4gICAgfCAnREFUQV9NQVRSSVgnXG4gICAgfCAnVVBDX0UnXG4gICAgfCAnVVBDX0EnXG4gICAgfCAnRUFOXzgnXG4gICAgfCAnRUFOXzEzJ1xuICAgIHwgJ0NPREVfMTI4J1xuICAgIHwgJ0NPREVfMzknXG4gICAgfCAnQ09ERV85MydcbiAgICB8ICdDT0RBQkFSJ1xuICAgIHwgJ0lURidcbiAgICB8ICdSU1MxNCdcbiAgICB8ICdSU1NfRVhQQU5ERUQnXG4gICAgfCAnUERGXzQxNydcbiAgICB8ICdBWlRFQydcbiAgICB8ICdNU0knO1xuICBjYW5jZWxsZWQ6IGJvb2xlYW47XG4gIHRleHQ6IHN0cmluZztcbn1cblxuLyoqXG4gKiBAbmFtZSBCYXJjb2RlIFNjYW5uZXJcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIEJhcmNvZGUgU2Nhbm5lciBQbHVnaW4gb3BlbnMgYSBjYW1lcmEgdmlldyBhbmQgYXV0b21hdGljYWxseSBzY2FucyBhIGJhcmNvZGUsIHJldHVybmluZyB0aGUgZGF0YSBiYWNrIHRvIHlvdS5cbiAqXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYHBob25lZ2FwLXBsdWdpbi1iYXJjb2Rlc2Nhbm5lcmAuIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIFtCYXJjb2RlU2Nhbm5lciBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL3Bob25lZ2FwL3Bob25lZ2FwLXBsdWdpbi1iYXJjb2Rlc2Nhbm5lcikuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBCYXJjb2RlU2Nhbm5lciB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvYmFyY29kZS1zY2FubmVyL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBiYXJjb2RlU2Nhbm5lcjogQmFyY29kZVNjYW5uZXIpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiB0aGlzLmJhcmNvZGVTY2FubmVyLnNjYW4oKS50aGVuKGJhcmNvZGVEYXRhID0+IHtcbiAqICBjb25zb2xlLmxvZygnQmFyY29kZSBkYXRhJywgYmFyY29kZURhdGEpO1xuICogfSkuY2F0Y2goZXJyID0+IHtcbiAqIFx0Y29uc29sZS5sb2coJ0Vycm9yJywgZXJyKTtcbiAqIH0pO1xuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogQmFyY29kZVNjYW5uZXJPcHRpb25zXG4gKiBCYXJjb2RlU2NhblJlc3VsdFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0JhcmNvZGVTY2FubmVyJyxcbiAgcGx1Z2luOiAncGhvbmVnYXAtcGx1Z2luLWJhcmNvZGVzY2FubmVyJyxcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLmJhcmNvZGVTY2FubmVyJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9waG9uZWdhcC9waG9uZWdhcC1wbHVnaW4tYmFyY29kZXNjYW5uZXInLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdCbGFja0JlcnJ5IDEwJywgJ0Jyb3dzZXInLCAnaU9TJywgJ1dpbmRvd3MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQmFyY29kZVNjYW5uZXIgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIEVuY29kZToge1xuICAgIFRFWFRfVFlQRTogc3RyaW5nO1xuICAgIEVNQUlMX1RZUEU6IHN0cmluZztcbiAgICBQSE9ORV9UWVBFOiBzdHJpbmc7XG4gICAgU01TX1RZUEU6IHN0cmluZztcbiAgfSA9IHtcbiAgICBURVhUX1RZUEU6ICdURVhUX1RZUEUnLFxuICAgIEVNQUlMX1RZUEU6ICdFTUFJTF9UWVBFJyxcbiAgICBQSE9ORV9UWVBFOiAnUEhPTkVfVFlQRScsXG4gICAgU01TX1RZUEU6ICdTTVNfVFlQRScsXG4gIH07XG5cbiAgLyoqXG4gICAqIE9wZW4gdGhlIGJhcmNvZGUgc2Nhbm5lci5cbiAgICogQHBhcmFtIHtCYXJjb2RlU2Nhbm5lck9wdGlvbnN9IFtvcHRpb25zXSBPcHRpb25hbCBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIHNjYW5uZXJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHNjYW5uZXIgZGF0YSwgb3IgcmVqZWN0cyB3aXRoIGFuIGVycm9yLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcbiAgfSlcbiAgc2NhbihvcHRpb25zPzogQmFyY29kZVNjYW5uZXJPcHRpb25zKTogUHJvbWlzZTxCYXJjb2RlU2NhblJlc3VsdD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbmNvZGVzIGRhdGEgaW50byBhIGJhcmNvZGUuXG4gICAqIE5PVEU6IG5vdCB3ZWxsIHN1cHBvcnRlZCBvbiBBbmRyb2lkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFR5cGUgb2YgZW5jb2RpbmdcbiAgICogQHBhcmFtIHthbnl9IGRhdGEgRGF0YSB0byBlbmNvZGVcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZW5jb2RlKHR5cGU6IHN0cmluZywgZGF0YTogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==